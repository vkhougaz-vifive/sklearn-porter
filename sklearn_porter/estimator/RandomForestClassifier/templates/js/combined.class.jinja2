{% extends 'base.combined.class' %}

{% block content %}
export class {{ class_name }} {

    private _findMax(nums: number[]) {
        var idx = 0;
        for (var i = 0, l = nums.length; i < l; i++) {
            idx = nums[i] > nums[idx] ? i : idx;
        }
        return idx;
    };

    private _normVals(nums: number[]) {
        var i, l = nums.length;
        var result = [], sum = 0.;
        for (i = 0; i < l; i++) {
            sum += nums[i];
        }
        if(sum === 0) {
            for (i = 0; i < l; i++) {
                result[i] = 1.0 / l;
            }
        } else {
            for (i = 0; i < l; i++) {
                result[i] = nums[i] / sum;
            }
        }
        return result;
    };

    private forest: Array<(features: number[]) => number[]>;

    constructor() {
        this.forest = [];
        const _normVals = this._normVals;
        {{ method }}
    
};

export function predict(features: number[]) {
    if (features.length !== {{ n_features }}) {
        throw new Error("Must pass {{ n_features }} features")
    }

    // Estimator:
    var clf = new {{ class_name }}();

    {% if is_test or to_json %}
    // Get JSON:
    console.log(JSON.stringify({
        "predict": clf.predict(features),
        "predict_proba": clf.predictProba(features)
    }));
    {% else %}
    // Get class prediction:
    var prediction = clf.predict(features);
    console.log("Predicted class: #" + prediction);

    // Get class probabilities:
    var probabilities = clf.predictProba(features);
    for (var i = 0; i < probabilities.length; i++) {
        console.log("Probability of class #" + i + " : " + probabilities[i]);
    }
    {% endif %}
}
{% endblock %}